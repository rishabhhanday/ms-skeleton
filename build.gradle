plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.hidetake.swagger.generator' version '2.18.2'
}


group = 'com.sample'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	integrationTestImplementation.extendsFrom testImplementation
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()

}
compileJava.dependsOn generateSwaggerCode
sourceSets {

	//Declaring this source set creates compile time and runtime configurations for it.
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integrationTest/java')
		}
		resources.srcDir file('src/integrationTest/resources')
	}


}

sourceSets.main.java.srcDirs('build/swagger-code-petstore/src/main/java','src/main/java')

swaggerSources {
	petstore {
		inputFile = file('swagger.yaml')
		code {
			language = 'spring'
			components = ['models']
			//outputDir = file(project.projectDir)
			rawOptions = ['--model-package','example.model']
		}
	}
}

dependencies {
	swaggerCodegen 'io.swagger:swagger-codegen-cli:2.3.1'
	// https://mvnrepository.com/artifact/io.swagger/swagger-annotations
	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.6.3'
// https://mvnrepository.com/artifact/org.threeten/threetenbp
	implementation group: 'org.threeten', name: 'threetenbp', version: '1.5.2'

// https://mvnrepository.com/artifact/javax.validation/validation-api
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'


	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	//If you want to ensure that integration tests are run every time when you invoke
	//this task, uncomment the following line.
	//outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
